"""Prometheus metric definitions used by the FastAPI application.

This module centralises all metric objects so that they can be imported
from anywhere (middleware, background tasks, routers, etc.) while still
being registered only once with the default Prometheus registry.
"""
from __future__ import annotations

import os
from prometheus_client import (
    Counter,
    Histogram,
    Gauge,
    REGISTRY,

    ProcessCollector,
)

# ---------------------------------------------------------------------------
# Default / built-in metrics
# ---------------------------------------------------------------------------
# The ProcessCollector & PlatformCollector add the same default metrics that
# `prom-client` provides out-of-the-box in the Node.js example, i.e. metrics
# prefixed with `process_`, `python_`, etc.
# They register themselves with the *default* REGISTRY when instantiated.
# Register default collectors once. Ignore if already registered.
try:
    ProcessCollector(registry=REGISTRY)  # CPU seconds total, mem, fds, etc.
except ValueError:
    # Collector already registered
    pass

# ---------------------------------------------------------------------------
# Custom metrics replicating the Node.js implementation
# ---------------------------------------------------------------------------

authors = {
    "original": "Node.js implementation by Windsurf sample project",
    "python": "Generated by Cascade AI on behalf of user",
}

# HTTP request counter
http_requests_total = Counter(
    "http_requests_total",
    "Total number of HTTP requests",
    labelnames=["method", "route", "status_code"],
)

# HTTP request duration histogram
http_request_duration_seconds = Histogram(
    "http_request_duration_seconds",
    "Duration of HTTP requests in seconds",
    labelnames=["method", "route", "status_code"],
    buckets=(0.1, 0.3, 0.5, 0.7, 1, 3, 5, 7, 10),
)

# Active DB connections gauge (will be updated periodically)
db_connections_active = Gauge(
    "db_connections_active",
    "Number of active database connections",
)

# DB query duration histogram
db_query_duration_seconds = Histogram(
    "db_query_duration_seconds",
    "Duration of database queries in seconds",
    labelnames=["operation"],
    buckets=(0.01, 0.05, 0.1, 0.3, 0.5, 1, 2, 5),
)

# Counter for total DB operations & status
db_operations_total = Counter(
    "db_operations_total",
    "Total number of database operations",
    labelnames=["operation", "status"],
)

# CPU percentage gauge (sampled in background)
process_cpu_percentage = Gauge(
    "process_cpu_percentage",
    "CPU usage percentage of this Python process (sampled every 5s)",
)

__all__ = [
    # Counters
    "http_requests_total",
    "db_operations_total",
    # Histograms
    "http_request_duration_seconds",
    "db_query_duration_seconds",
    # Gauges
    "db_connections_active",
    "process_cpu_percentage",
    # Registry (for explicit access)
    "REGISTRY",
]
